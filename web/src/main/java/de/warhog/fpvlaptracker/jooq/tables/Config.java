/*
 * This file is generated by jOOQ.
 */
package de.warhog.fpvlaptracker.jooq.tables;


import de.warhog.fpvlaptracker.jooq.Indexes;
import de.warhog.fpvlaptracker.jooq.Keys;
import de.warhog.fpvlaptracker.jooq.Public;
import de.warhog.fpvlaptracker.jooq.tables.records.ConfigRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Config extends TableImpl<ConfigRecord> {

    private static final long serialVersionUID = -620685977;

    /**
     * The reference instance of <code>PUBLIC.CONFIG</code>
     */
    public static final Config CONFIG = new Config();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConfigRecord> getRecordType() {
        return ConfigRecord.class;
    }

    /**
     * The column <code>PUBLIC.CONFIG.CONFIG_KEY</code>.
     */
    public final TableField<ConfigRecord, String> CONFIG_KEY = createField("CONFIG_KEY", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CONFIG.CONFIG_VALUE</code>.
     */
    public final TableField<ConfigRecord, String> CONFIG_VALUE = createField("CONFIG_VALUE", org.jooq.impl.SQLDataType.VARCHAR(4096), this, "");

    /**
     * Create a <code>PUBLIC.CONFIG</code> table reference
     */
    public Config() {
        this(DSL.name("CONFIG"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.CONFIG</code> table reference
     */
    public Config(String alias) {
        this(DSL.name(alias), CONFIG);
    }

    /**
     * Create an aliased <code>PUBLIC.CONFIG</code> table reference
     */
    public Config(Name alias) {
        this(alias, CONFIG);
    }

    private Config(Name alias, Table<ConfigRecord> aliased) {
        this(alias, aliased, null);
    }

    private Config(Name alias, Table<ConfigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Config(Table<O> child, ForeignKey<O, ConfigRecord> key) {
        super(child, key, CONFIG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_7);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ConfigRecord> getPrimaryKey() {
        return Keys.PK_CONFIG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ConfigRecord>> getKeys() {
        return Arrays.<UniqueKey<ConfigRecord>>asList(Keys.PK_CONFIG, Keys.UQ_CONFIG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Config as(String alias) {
        return new Config(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Config as(Name alias) {
        return new Config(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Config rename(String name) {
        return new Config(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Config rename(Name name) {
        return new Config(name, null);
    }
}
