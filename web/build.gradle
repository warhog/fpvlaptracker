buildscript {
    repositories {
        mavenCentral()
        jcenter();
        maven { url "http://mvnrepository.com/artifact" }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.6.RELEASE")
        classpath "nu.studer:gradle-jooq-plugin:3.0.3"
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'findbugs'
apply plugin: 'idea'
apply plugin: 'nu.studer.jooq'

// the default value for version is stored in gradle.properties file
project.version = project.findProperty('version')
println 'project.version=' + project.version

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

bootJar {
    launchScript()
}

configurations {
    all*.exclude group: 'commons-logging'
}

jar {
    baseName = 'fpvlaptracker'
    version =  "${project.version}"
}

task copyWebpage(type: Copy) {
    from file("$projectDir/webpage/dist/webpage")
    into file("$buildDir/resources/main/static")
}
task buildWebpage() {
    dependsOn 'webpage:build'
    dependsOn 'copyWebpage'
    tasks.findByName('copyWebpage').mustRunAfter 'webpage:build'    
}
processResources.dependsOn buildWebpage

def generatedVersionDir = "${buildDir}/generated-version"

sourceSets {
    main {
        output.dir(generatedVersionDir, builtBy: 'generateVersionProperties')
    }
}

task generateVersionProperties {
    doLast {
        def propertiesFile = file "$generatedVersionDir/version.properties"
        propertiesFile.parentFile.mkdirs()
        def properties = new Properties()
        properties.setProperty("version", rootProject.version.toString())
        propertiesFile.withWriter { properties.store(it, null) }
    }
}
processResources.dependsOn generateVersionProperties

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


tasks.withType(FindBugs) {
    ignoreFailures = true 
    reports {
        xml.enabled = false
        html.enabled = true
    }
    excludeFilter file('./findbugs-exclude.xml')
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'de.warhog.fpvlaptracker.Laptracker'
}

repositories {
    mavenCentral()
    maven { url "http://mvnrepository.com/artifact" }
    jcenter();
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.6.RELEASE'
    compile group: 'org.springframework', name: 'spring-websocket', version: '5.1.8.RELEASE'
    compile group: 'org.springframework', name: 'spring-messaging', version: '5.1.8.RELEASE'
    compile group: 'org.springframework', name: 'spring-tx', version: '5.1.8.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.1.6.RELEASE'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1u2'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    compile group: 'org.jooq', name: 'jooq', version: '3.11.11'
    compile group: 'com.h2database', name: 'h2', version: '1.4.199'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8'
    jooqRuntime 'com.h2database:h2:1.4.199'
}

jooq {
    // jooq-codegen version
    version = '3.11.11'
    edition = 'OSS'
    flt(sourceSets.main) {
        jdbc {
            driver = 'org.h2.Driver'
            url = 'jdbc:h2:./flt.h2'
            user = 'sa'
            password = ''
            schema = 'PUBLIC'
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.h2.H2Database'
                inputSchema = 'PUBLIC'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
            }
            target {
                packageName = 'de.warhog.fpvlaptracker.jooq'
                directory = "src/main/java"
            }
        }
    }
}

project.tasks.getByName('compileJava').dependsOn -= 'generateFltJooqSchemaSource'
