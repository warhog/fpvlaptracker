buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.0.RELEASE")
        classpath "nu.studer:gradle-jooq-plugin:3.0.2"
    }
}
plugins {
    id "com.moowork.gulp" version "1.2.0"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'findbugs'
apply plugin: 'idea'
apply plugin: 'nu.studer.jooq'

// the default value for version is stored in gradle.properties file
project.version = project.findProperty('version')
println 'project.version=' + project.version

gulp {
    workDir = file("${project.projectDir}")
    colors = true
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

configurations {
    all*.exclude group: 'commons-logging'
}

jar {
    baseName = 'fpvlaptracker'
    version =  '${project.version}'
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


tasks.withType(FindBugs) {
    ignoreFailures = true 
    reports {
        xml.enabled = false
        html.enabled = true
    }
    classes = classes.filter {
        !it.path.contains("de/warhog/fpvlaptracker/jooq")
    }    
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'de.warhog.fpvlaptracker.Laptracker'
}

compileJava.dependsOn gulp_build

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.1.0.RELEASE'
    compile group: 'org.springframework', name: 'spring-websocket', version: '5.1.2.RELEASE'
    compile group: 'org.springframework', name: 'spring-messaging', version: '5.1.2.RELEASE'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.1.0.RELEASE'
    compile group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    compile group: 'com.google.code.findbugs', name: 'annotations', version: '3.0.1u2'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind'
    compile group: 'org.jooq', name: 'jooq', version: '3.11.7'
    compile group: 'com.h2database', name: 'h2', version: '1.4.197'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    jooqRuntime 'com.h2database:h2:1.4.197'
}

import groovy.json.*
task injectVersion() {
    println 'creating package_version.json and injecting version ' + project.version
    def inputFile = new File("${project.projectDir}/package.json")
    def outputFile = new File("${project.projectDir}/build/package_version.json")
    def json = new JsonSlurper().parseText(inputFile.text)
    json.version = project.version
    def builder = new JsonBuilder(json)
    //println builder.toPrettyString()
    outputFile.withWriter {
        builder.writeTo(it)
    }
    println 'package_version.json created'
}

gulp_build.dependsOn injectVersion


jooq {
    version = '3.11.7'
    edition = 'OSS'
    flt(sourceSets.main) {
        jdbc {
            driver = 'org.h2.Driver'
            url = 'jdbc:h2:./flt.h2'
            user = 'sa'
            password = ''
            schema = 'public'
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.h2.H2Database'
                inputSchema = 'PUBLIC'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
            }
            target {
                packageName = 'de.warhog.fpvlaptracker.jooq'
                directory = "src/main/java"
            }
        }
    }
}

project.tasks.getByName('compileJava').dependsOn -= 'generateFltJooqSchemaSource'
